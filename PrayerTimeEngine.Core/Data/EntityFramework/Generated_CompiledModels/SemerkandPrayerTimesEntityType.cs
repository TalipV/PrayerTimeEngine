// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using PrayerTimeEngine.Core.Common.Extension;
using PrayerTimeEngine.Core.Domain.DynamicPrayerTimes.Providers.Semerkand.Models.Entities;


#pragma warning disable 219, 612, 618
#nullable disable

namespace PrayerTimeEngine.Core.Data.EntityFramework.Generated_CompiledModels
{
    internal partial class SemerkandPrayerTimesEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "PrayerTimeEngine.Core.Domain.Calculators.Semerkand.Models.Entities.SemerkandPrayerTimes",
                typeof(SemerkandPrayerTimes),
                baseEntityType);

            var iD = runtimeEntityType.AddProperty(
                "ID",
                typeof(int),
                propertyInfo: typeof(SemerkandPrayerTimes).GetProperty("ID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SemerkandPrayerTimes).GetField("<ID>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            iD.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var asr = runtimeEntityType.AddProperty(
                "Asr",
                typeof(ZonedDateTime),
                propertyInfo: typeof(SemerkandPrayerTimes).GetProperty("Asr", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SemerkandPrayerTimes).GetField("<Asr>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            asr.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<ZonedDateTime>(
                    (ZonedDateTime v1, ZonedDateTime v2) => v1.Equals(v2),
                    (ZonedDateTime v) => v.GetHashCode(),
                    (ZonedDateTime v) => v),
                keyComparer: new ValueComparer<ZonedDateTime>(
                    (ZonedDateTime v1, ZonedDateTime v2) => v1.Equals(v2),
                    (ZonedDateTime v) => v.GetHashCode(),
                    (ZonedDateTime v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                converter: new ValueConverter<ZonedDateTime, string>(
                    (ZonedDateTime x) => x.GetStringForDBColumn(),
                    (string x) => x.GetZonedDateTimeFromDBColumnString()),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ZonedDateTime, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<ZonedDateTime, string>(
                        (ZonedDateTime x) => x.GetStringForDBColumn(),
                        (string x) => x.GetZonedDateTimeFromDBColumnString())));
            asr.SetSentinelFromProviderValue("0001-01-01T00:00:00 UTC (+00)");

            var cityID = runtimeEntityType.AddProperty(
                "CityID",
                typeof(int),
                propertyInfo: typeof(SemerkandPrayerTimes).GetProperty("CityID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SemerkandPrayerTimes).GetField("<CityID>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            cityID.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var date = runtimeEntityType.AddProperty(
                "Date",
                typeof(ZonedDateTime),
                propertyInfo: typeof(SemerkandPrayerTimes).GetProperty("Date", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SemerkandPrayerTimes).GetField("<Date>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            date.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<ZonedDateTime>(
                    (ZonedDateTime v1, ZonedDateTime v2) => v1.Equals(v2),
                    (ZonedDateTime v) => v.GetHashCode(),
                    (ZonedDateTime v) => v),
                keyComparer: new ValueComparer<ZonedDateTime>(
                    (ZonedDateTime v1, ZonedDateTime v2) => v1.Equals(v2),
                    (ZonedDateTime v) => v.GetHashCode(),
                    (ZonedDateTime v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                converter: new ValueConverter<ZonedDateTime, string>(
                    (ZonedDateTime x) => x.GetStringForDBColumn(),
                    (string x) => x.GetZonedDateTimeFromDBColumnString()),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ZonedDateTime, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<ZonedDateTime, string>(
                        (ZonedDateTime x) => x.GetStringForDBColumn(),
                        (string x) => x.GetZonedDateTimeFromDBColumnString())));
            date.SetSentinelFromProviderValue("0001-01-01T00:00:00 UTC (+00)");

            var dayOfYear = runtimeEntityType.AddProperty(
                "DayOfYear",
                typeof(int),
                propertyInfo: typeof(SemerkandPrayerTimes).GetProperty("DayOfYear", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SemerkandPrayerTimes).GetField("<DayOfYear>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            dayOfYear.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var dhuhr = runtimeEntityType.AddProperty(
                "Dhuhr",
                typeof(ZonedDateTime),
                propertyInfo: typeof(SemerkandPrayerTimes).GetProperty("Dhuhr", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SemerkandPrayerTimes).GetField("<Dhuhr>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            dhuhr.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<ZonedDateTime>(
                    (ZonedDateTime v1, ZonedDateTime v2) => v1.Equals(v2),
                    (ZonedDateTime v) => v.GetHashCode(),
                    (ZonedDateTime v) => v),
                keyComparer: new ValueComparer<ZonedDateTime>(
                    (ZonedDateTime v1, ZonedDateTime v2) => v1.Equals(v2),
                    (ZonedDateTime v) => v.GetHashCode(),
                    (ZonedDateTime v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                converter: new ValueConverter<ZonedDateTime, string>(
                    (ZonedDateTime x) => x.GetStringForDBColumn(),
                    (string x) => x.GetZonedDateTimeFromDBColumnString()),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ZonedDateTime, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<ZonedDateTime, string>(
                        (ZonedDateTime x) => x.GetStringForDBColumn(),
                        (string x) => x.GetZonedDateTimeFromDBColumnString())));
            dhuhr.SetSentinelFromProviderValue("0001-01-01T00:00:00 UTC (+00)");

            var fajr = runtimeEntityType.AddProperty(
                "Fajr",
                typeof(ZonedDateTime),
                propertyInfo: typeof(SemerkandPrayerTimes).GetProperty("Fajr", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SemerkandPrayerTimes).GetField("<Fajr>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            fajr.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<ZonedDateTime>(
                    (ZonedDateTime v1, ZonedDateTime v2) => v1.Equals(v2),
                    (ZonedDateTime v) => v.GetHashCode(),
                    (ZonedDateTime v) => v),
                keyComparer: new ValueComparer<ZonedDateTime>(
                    (ZonedDateTime v1, ZonedDateTime v2) => v1.Equals(v2),
                    (ZonedDateTime v) => v.GetHashCode(),
                    (ZonedDateTime v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                converter: new ValueConverter<ZonedDateTime, string>(
                    (ZonedDateTime x) => x.GetStringForDBColumn(),
                    (string x) => x.GetZonedDateTimeFromDBColumnString()),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ZonedDateTime, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<ZonedDateTime, string>(
                        (ZonedDateTime x) => x.GetStringForDBColumn(),
                        (string x) => x.GetZonedDateTimeFromDBColumnString())));
            fajr.SetSentinelFromProviderValue("0001-01-01T00:00:00 UTC (+00)");

            var insertInstant = runtimeEntityType.AddProperty(
                "InsertInstant",
                typeof(Instant?),
                propertyInfo: typeof(SemerkandPrayerTimes).GetProperty("InsertInstant", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SemerkandPrayerTimes).GetField("<InsertInstant>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            insertInstant.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<Instant?>(
                    (Nullable<Instant> v1, Nullable<Instant> v2) => object.Equals((object)v1, (object)v2),
                    (Nullable<Instant> v) => v.GetHashCode(),
                    (Nullable<Instant> v) => v),
                keyComparer: new ValueComparer<Instant?>(
                    (Nullable<Instant> v1, Nullable<Instant> v2) => object.Equals((object)v1, (object)v2),
                    (Nullable<Instant> v) => v.GetHashCode(),
                    (Nullable<Instant> v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                converter: new ValueConverter<Instant?, string>(
                    (Nullable<Instant> x) => x != null ? x.Value.GetStringForDBColumn() : null,
                    (string x) => x != null ? (Nullable<Instant>)x.GetInstantFromDBColumnString() : null),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Instant?, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<Instant?, string>(
                        (Nullable<Instant> x) => x != null ? x.Value.GetStringForDBColumn() : null,
                        (string x) => x != null ? (Nullable<Instant>)x.GetInstantFromDBColumnString() : null)));

            var isha = runtimeEntityType.AddProperty(
                "Isha",
                typeof(ZonedDateTime),
                propertyInfo: typeof(SemerkandPrayerTimes).GetProperty("Isha", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SemerkandPrayerTimes).GetField("<Isha>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            isha.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<ZonedDateTime>(
                    (ZonedDateTime v1, ZonedDateTime v2) => v1.Equals(v2),
                    (ZonedDateTime v) => v.GetHashCode(),
                    (ZonedDateTime v) => v),
                keyComparer: new ValueComparer<ZonedDateTime>(
                    (ZonedDateTime v1, ZonedDateTime v2) => v1.Equals(v2),
                    (ZonedDateTime v) => v.GetHashCode(),
                    (ZonedDateTime v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                converter: new ValueConverter<ZonedDateTime, string>(
                    (ZonedDateTime x) => x.GetStringForDBColumn(),
                    (string x) => x.GetZonedDateTimeFromDBColumnString()),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ZonedDateTime, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<ZonedDateTime, string>(
                        (ZonedDateTime x) => x.GetStringForDBColumn(),
                        (string x) => x.GetZonedDateTimeFromDBColumnString())));
            isha.SetSentinelFromProviderValue("0001-01-01T00:00:00 UTC (+00)");

            var maghrib = runtimeEntityType.AddProperty(
                "Maghrib",
                typeof(ZonedDateTime),
                propertyInfo: typeof(SemerkandPrayerTimes).GetProperty("Maghrib", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SemerkandPrayerTimes).GetField("<Maghrib>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            maghrib.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<ZonedDateTime>(
                    (ZonedDateTime v1, ZonedDateTime v2) => v1.Equals(v2),
                    (ZonedDateTime v) => v.GetHashCode(),
                    (ZonedDateTime v) => v),
                keyComparer: new ValueComparer<ZonedDateTime>(
                    (ZonedDateTime v1, ZonedDateTime v2) => v1.Equals(v2),
                    (ZonedDateTime v) => v.GetHashCode(),
                    (ZonedDateTime v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                converter: new ValueConverter<ZonedDateTime, string>(
                    (ZonedDateTime x) => x.GetStringForDBColumn(),
                    (string x) => x.GetZonedDateTimeFromDBColumnString()),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ZonedDateTime, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<ZonedDateTime, string>(
                        (ZonedDateTime x) => x.GetStringForDBColumn(),
                        (string x) => x.GetZonedDateTimeFromDBColumnString())));
            maghrib.SetSentinelFromProviderValue("0001-01-01T00:00:00 UTC (+00)");

            var nextFajr = runtimeEntityType.AddProperty(
                "NextFajr",
                typeof(ZonedDateTime?),
                propertyInfo: typeof(SemerkandPrayerTimes).GetProperty("NextFajr", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SemerkandPrayerTimes).GetField("<NextFajr>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nextFajr.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<ZonedDateTime?>(
                    (Nullable<ZonedDateTime> v1, Nullable<ZonedDateTime> v2) => object.Equals((object)v1, (object)v2),
                    (Nullable<ZonedDateTime> v) => v.GetHashCode(),
                    (Nullable<ZonedDateTime> v) => v),
                keyComparer: new ValueComparer<ZonedDateTime?>(
                    (Nullable<ZonedDateTime> v1, Nullable<ZonedDateTime> v2) => object.Equals((object)v1, (object)v2),
                    (Nullable<ZonedDateTime> v) => v.GetHashCode(),
                    (Nullable<ZonedDateTime> v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                converter: new ValueConverter<ZonedDateTime?, string>(
                    (Nullable<ZonedDateTime> x) => x != null ? x.Value.GetStringForDBColumn() : null,
                    (string x) => x != null ? (Nullable<ZonedDateTime>)x.GetZonedDateTimeFromDBColumnString() : null),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ZonedDateTime?, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<ZonedDateTime?, string>(
                        (Nullable<ZonedDateTime> x) => x != null ? x.Value.GetStringForDBColumn() : null,
                        (string x) => x != null ? (Nullable<ZonedDateTime>)x.GetZonedDateTimeFromDBColumnString() : null)));

            var shuruq = runtimeEntityType.AddProperty(
                "Shuruq",
                typeof(ZonedDateTime),
                propertyInfo: typeof(SemerkandPrayerTimes).GetProperty("Shuruq", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SemerkandPrayerTimes).GetField("<Shuruq>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            shuruq.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<ZonedDateTime>(
                    (ZonedDateTime v1, ZonedDateTime v2) => v1.Equals(v2),
                    (ZonedDateTime v) => v.GetHashCode(),
                    (ZonedDateTime v) => v),
                keyComparer: new ValueComparer<ZonedDateTime>(
                    (ZonedDateTime v1, ZonedDateTime v2) => v1.Equals(v2),
                    (ZonedDateTime v) => v.GetHashCode(),
                    (ZonedDateTime v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                converter: new ValueConverter<ZonedDateTime, string>(
                    (ZonedDateTime x) => x.GetStringForDBColumn(),
                    (string x) => x.GetZonedDateTimeFromDBColumnString()),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ZonedDateTime, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<ZonedDateTime, string>(
                        (ZonedDateTime x) => x.GetStringForDBColumn(),
                        (string x) => x.GetZonedDateTimeFromDBColumnString())));
            shuruq.SetSentinelFromProviderValue("0001-01-01T00:00:00 UTC (+00)");

            var key = runtimeEntityType.AddKey(
                new[] { iD });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "SemerkandPrayerTimes");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
