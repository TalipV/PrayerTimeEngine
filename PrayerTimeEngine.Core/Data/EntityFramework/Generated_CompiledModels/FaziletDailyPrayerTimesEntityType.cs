// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using PrayerTimeEngine.Core.Common.Extension;
using PrayerTimeEngine.Core.Domain.DynamicPrayerTimes.Providers.Fazilet.Models.Entities;

#pragma warning disable 219, 612, 618
#nullable disable

namespace PrayerTimeEngine.Core.Data.EntityFramework.Generated_CompiledModels
{
    [EntityFrameworkInternal]
    public partial class FaziletDailyPrayerTimesEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "PrayerTimeEngine.Core.Domain.DynamicPrayerTimes.Providers.Fazilet.Models.Entities.FaziletDailyPrayerTimes",
                typeof(FaziletDailyPrayerTimes),
                baseEntityType,
                propertyCount: 12,
                keyCount: 1);

            var iD = runtimeEntityType.AddProperty(
                "ID",
                typeof(int),
                propertyInfo: typeof(FaziletDailyPrayerTimes).GetProperty("ID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FaziletDailyPrayerTimes).GetField("<ID>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);

            var asr = runtimeEntityType.AddProperty(
                "Asr",
                typeof(ZonedDateTime),
                propertyInfo: typeof(FaziletDailyPrayerTimes).GetProperty("Asr", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FaziletDailyPrayerTimes).GetField("<Asr>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            asr.SetValueConverter(new ValueConverter<ZonedDateTime, string>(
                string (ZonedDateTime x) => x.GetStringForDBColumn(),
                ZonedDateTime (string x) => x.GetZonedDateTimeFromDBColumnString()));
            asr.SetSentinelFromProviderValue("0001-01-01T00:00:00 UTC (+00)");

            var cityID = runtimeEntityType.AddProperty(
                "CityID",
                typeof(int),
                propertyInfo: typeof(FaziletDailyPrayerTimes).GetProperty("CityID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FaziletDailyPrayerTimes).GetField("<CityID>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);

            var date = runtimeEntityType.AddProperty(
                "Date",
                typeof(ZonedDateTime),
                propertyInfo: typeof(FaziletDailyPrayerTimes).GetProperty("Date", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FaziletDailyPrayerTimes).GetField("<Date>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            date.SetValueConverter(new ValueConverter<ZonedDateTime, string>(
                string (ZonedDateTime x) => x.GetStringForDBColumn(),
                ZonedDateTime (string x) => x.GetZonedDateTimeFromDBColumnString()));
            date.SetSentinelFromProviderValue("0001-01-01T00:00:00 UTC (+00)");

            var dhuhr = runtimeEntityType.AddProperty(
                "Dhuhr",
                typeof(ZonedDateTime),
                propertyInfo: typeof(FaziletDailyPrayerTimes).GetProperty("Dhuhr", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FaziletDailyPrayerTimes).GetField("<Dhuhr>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            dhuhr.SetValueConverter(new ValueConverter<ZonedDateTime, string>(
                string (ZonedDateTime x) => x.GetStringForDBColumn(),
                ZonedDateTime (string x) => x.GetZonedDateTimeFromDBColumnString()));
            dhuhr.SetSentinelFromProviderValue("0001-01-01T00:00:00 UTC (+00)");

            var fajr = runtimeEntityType.AddProperty(
                "Fajr",
                typeof(ZonedDateTime),
                propertyInfo: typeof(FaziletDailyPrayerTimes).GetProperty("Fajr", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FaziletDailyPrayerTimes).GetField("<Fajr>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            fajr.SetValueConverter(new ValueConverter<ZonedDateTime, string>(
                string (ZonedDateTime x) => x.GetStringForDBColumn(),
                ZonedDateTime (string x) => x.GetZonedDateTimeFromDBColumnString()));
            fajr.SetSentinelFromProviderValue("0001-01-01T00:00:00 UTC (+00)");

            var imsak = runtimeEntityType.AddProperty(
                "Imsak",
                typeof(ZonedDateTime),
                propertyInfo: typeof(FaziletDailyPrayerTimes).GetProperty("Imsak", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FaziletDailyPrayerTimes).GetField("<Imsak>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            imsak.SetValueConverter(new ValueConverter<ZonedDateTime, string>(
                string (ZonedDateTime x) => x.GetStringForDBColumn(),
                ZonedDateTime (string x) => x.GetZonedDateTimeFromDBColumnString()));
            imsak.SetSentinelFromProviderValue("0001-01-01T00:00:00 UTC (+00)");

            var insertInstant = runtimeEntityType.AddProperty(
                "InsertInstant",
                typeof(Instant?),
                propertyInfo: typeof(FaziletDailyPrayerTimes).GetProperty("InsertInstant", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FaziletDailyPrayerTimes).GetField("<InsertInstant>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            insertInstant.SetValueConverter(new ValueConverter<Instant?, string>(
                string (Instant? x) => (x != null ? x.Value.GetStringForDBColumn() : null),
                Instant? (string x) => (x != null ? ((Instant? )(x.GetInstantFromDBColumnString())) : null)));

            var isha = runtimeEntityType.AddProperty(
                "Isha",
                typeof(ZonedDateTime),
                propertyInfo: typeof(FaziletDailyPrayerTimes).GetProperty("Isha", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FaziletDailyPrayerTimes).GetField("<Isha>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            isha.SetValueConverter(new ValueConverter<ZonedDateTime, string>(
                string (ZonedDateTime x) => x.GetStringForDBColumn(),
                ZonedDateTime (string x) => x.GetZonedDateTimeFromDBColumnString()));
            isha.SetSentinelFromProviderValue("0001-01-01T00:00:00 UTC (+00)");

            var maghrib = runtimeEntityType.AddProperty(
                "Maghrib",
                typeof(ZonedDateTime),
                propertyInfo: typeof(FaziletDailyPrayerTimes).GetProperty("Maghrib", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FaziletDailyPrayerTimes).GetField("<Maghrib>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            maghrib.SetValueConverter(new ValueConverter<ZonedDateTime, string>(
                string (ZonedDateTime x) => x.GetStringForDBColumn(),
                ZonedDateTime (string x) => x.GetZonedDateTimeFromDBColumnString()));
            maghrib.SetSentinelFromProviderValue("0001-01-01T00:00:00 UTC (+00)");

            var nextFajr = runtimeEntityType.AddProperty(
                "NextFajr",
                typeof(ZonedDateTime?),
                propertyInfo: typeof(FaziletDailyPrayerTimes).GetProperty("NextFajr", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FaziletDailyPrayerTimes).GetField("<NextFajr>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nextFajr.SetValueConverter(new ValueConverter<ZonedDateTime?, string>(
                string (ZonedDateTime? x) => (x != null ? x.Value.GetStringForDBColumn() : null),
                ZonedDateTime? (string x) => (x != null ? ((ZonedDateTime? )(x.GetZonedDateTimeFromDBColumnString())) : null)));

            var shuruq = runtimeEntityType.AddProperty(
                "Shuruq",
                typeof(ZonedDateTime),
                propertyInfo: typeof(FaziletDailyPrayerTimes).GetProperty("Shuruq", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(FaziletDailyPrayerTimes).GetField("<Shuruq>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            shuruq.SetValueConverter(new ValueConverter<ZonedDateTime, string>(
                string (ZonedDateTime x) => x.GetStringForDBColumn(),
                ZonedDateTime (string x) => x.GetZonedDateTimeFromDBColumnString()));
            shuruq.SetSentinelFromProviderValue("0001-01-01T00:00:00 UTC (+00)");

            var key = runtimeEntityType.AddKey(
                new[] { iD });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "FaziletPrayerTimes");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
