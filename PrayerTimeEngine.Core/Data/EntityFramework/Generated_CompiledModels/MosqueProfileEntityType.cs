// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrayerTimeEngine.Core.Common.Enum;
using PrayerTimeEngine.Core.Domain.ProfileManagement.Models.Entities;

#pragma warning disable 219, 612, 618
#nullable disable

namespace PrayerTimeEngine.Core.Data.EntityFramework.Generated_CompiledModels
{
    internal partial class MosqueProfileEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "PrayerTimeEngine.Core.Domain.ProfileManagement.Models.Entities.MosqueProfile",
                typeof(MosqueProfile),
                baseEntityType,
                discriminatorProperty: "Discriminator",
                discriminatorValue: "MosqueProfile");

            var externalID = runtimeEntityType.AddProperty(
                "ExternalID",
                typeof(string),
                propertyInfo: typeof(MosqueProfile).GetProperty("ExternalID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MosqueProfile).GetField("<ExternalID>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            externalID.TypeMapping = SqliteStringTypeMapping.Default;

            var mosqueProviderType = runtimeEntityType.AddProperty(
                "MosqueProviderType",
                typeof(EMosquePrayerTimeProviderType),
                propertyInfo: typeof(MosqueProfile).GetProperty("MosqueProviderType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MosqueProfile).GetField("<MosqueProviderType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            mosqueProviderType.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<EMosquePrayerTimeProviderType>(
                    (EMosquePrayerTimeProviderType v1, EMosquePrayerTimeProviderType v2) => object.Equals((object)v1, (object)v2),
                    (EMosquePrayerTimeProviderType v) => v.GetHashCode(),
                    (EMosquePrayerTimeProviderType v) => v),
                keyComparer: new ValueComparer<EMosquePrayerTimeProviderType>(
                    (EMosquePrayerTimeProviderType v1, EMosquePrayerTimeProviderType v2) => object.Equals((object)v1, (object)v2),
                    (EMosquePrayerTimeProviderType v) => v.GetHashCode(),
                    (EMosquePrayerTimeProviderType v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"),
                converter: new ValueConverter<EMosquePrayerTimeProviderType, int>(
                    (EMosquePrayerTimeProviderType value) => (int)value,
                    (int value) => (EMosquePrayerTimeProviderType)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<EMosquePrayerTimeProviderType, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<EMosquePrayerTimeProviderType, int>(
                        (EMosquePrayerTimeProviderType value) => (int)value,
                        (int value) => (EMosquePrayerTimeProviderType)value)));
            mosqueProviderType.SetSentinelFromProviderValue(0);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Profiles");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
