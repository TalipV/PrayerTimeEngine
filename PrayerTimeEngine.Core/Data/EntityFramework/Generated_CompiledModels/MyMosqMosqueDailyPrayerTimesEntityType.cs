// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using PrayerTimeEngine.Core.Common.Extension;
using PrayerTimeEngine.Core.Domain.MosquePrayerTimes.Providers.MyMosq.Models.Entities;

#pragma warning disable 219, 612, 618
#nullable disable

namespace PrayerTimeEngine.Core.Data.EntityFramework.Generated_CompiledModels
{
    [EntityFrameworkInternal]
    public partial class MyMosqMosqueDailyPrayerTimesEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "PrayerTimeEngine.Core.Domain.MosquePrayerTimes.Providers.MyMosq.Models.Entities.MyMosqMosqueDailyPrayerTimes",
                typeof(MyMosqMosqueDailyPrayerTimes),
                baseEntityType,
                propertyCount: 17,
                keyCount: 1);

            var iD = runtimeEntityType.AddProperty(
                "ID",
                typeof(int),
                propertyInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetProperty("ID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetField("<ID>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);

            var asr = runtimeEntityType.AddProperty(
                "Asr",
                typeof(LocalTime),
                propertyInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetProperty("Asr", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetField("<Asr>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            asr.SetValueConverter(new ValueConverter<LocalTime, string>(
                string (LocalTime x) => x.GetStringForDBColumn(),
                LocalTime (string x) => x.GetLocalTimeFromDBColumnString()));
            asr.SetSentinelFromProviderValue("00:00:00");

            var asrCongregation = runtimeEntityType.AddProperty(
                "AsrCongregation",
                typeof(LocalTime),
                propertyInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetProperty("AsrCongregation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetField("<AsrCongregation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            asrCongregation.SetValueConverter(new ValueConverter<LocalTime, string>(
                string (LocalTime x) => x.GetStringForDBColumn(),
                LocalTime (string x) => x.GetLocalTimeFromDBColumnString()));
            asrCongregation.SetSentinelFromProviderValue("00:00:00");

            var date = runtimeEntityType.AddProperty(
                "Date",
                typeof(LocalDate),
                propertyInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetProperty("Date", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetField("<Date>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            date.SetValueConverter(new ValueConverter<LocalDate, string>(
                string (LocalDate x) => x.GetStringForDBColumn(),
                LocalDate (string x) => x.GetLocalDateFromDBColumnString()));
            date.SetSentinelFromProviderValue("01/01/0001");

            var dhuhr = runtimeEntityType.AddProperty(
                "Dhuhr",
                typeof(LocalTime),
                propertyInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetProperty("Dhuhr", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetField("<Dhuhr>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            dhuhr.SetValueConverter(new ValueConverter<LocalTime, string>(
                string (LocalTime x) => x.GetStringForDBColumn(),
                LocalTime (string x) => x.GetLocalTimeFromDBColumnString()));
            dhuhr.SetSentinelFromProviderValue("00:00:00");

            var dhuhrCongregation = runtimeEntityType.AddProperty(
                "DhuhrCongregation",
                typeof(LocalTime),
                propertyInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetProperty("DhuhrCongregation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetField("<DhuhrCongregation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            dhuhrCongregation.SetValueConverter(new ValueConverter<LocalTime, string>(
                string (LocalTime x) => x.GetStringForDBColumn(),
                LocalTime (string x) => x.GetLocalTimeFromDBColumnString()));
            dhuhrCongregation.SetSentinelFromProviderValue("00:00:00");

            var externalID = runtimeEntityType.AddProperty(
                "ExternalID",
                typeof(string),
                propertyInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetProperty("ExternalID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetField("<ExternalID>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var fajr = runtimeEntityType.AddProperty(
                "Fajr",
                typeof(LocalTime),
                propertyInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetProperty("Fajr", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetField("<Fajr>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            fajr.SetValueConverter(new ValueConverter<LocalTime, string>(
                string (LocalTime x) => x.GetStringForDBColumn(),
                LocalTime (string x) => x.GetLocalTimeFromDBColumnString()));
            fajr.SetSentinelFromProviderValue("00:00:00");

            var fajrCongregation = runtimeEntityType.AddProperty(
                "FajrCongregation",
                typeof(LocalTime),
                propertyInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetProperty("FajrCongregation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetField("<FajrCongregation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            fajrCongregation.SetValueConverter(new ValueConverter<LocalTime, string>(
                string (LocalTime x) => x.GetStringForDBColumn(),
                LocalTime (string x) => x.GetLocalTimeFromDBColumnString()));
            fajrCongregation.SetSentinelFromProviderValue("00:00:00");

            var insertInstant = runtimeEntityType.AddProperty(
                "InsertInstant",
                typeof(Instant?),
                propertyInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetProperty("InsertInstant", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetField("<InsertInstant>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            insertInstant.SetValueConverter(new ValueConverter<Instant?, string>(
                string (Instant? x) => (x != null ? x.Value.GetStringForDBColumn() : null),
                Instant? (string x) => (x != null ? ((Instant? )(x.GetInstantFromDBColumnString())) : null)));

            var isha = runtimeEntityType.AddProperty(
                "Isha",
                typeof(LocalTime),
                propertyInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetProperty("Isha", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetField("<Isha>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            isha.SetValueConverter(new ValueConverter<LocalTime, string>(
                string (LocalTime x) => x.GetStringForDBColumn(),
                LocalTime (string x) => x.GetLocalTimeFromDBColumnString()));
            isha.SetSentinelFromProviderValue("00:00:00");

            var ishaCongregation = runtimeEntityType.AddProperty(
                "IshaCongregation",
                typeof(LocalTime),
                propertyInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetProperty("IshaCongregation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetField("<IshaCongregation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            ishaCongregation.SetValueConverter(new ValueConverter<LocalTime, string>(
                string (LocalTime x) => x.GetStringForDBColumn(),
                LocalTime (string x) => x.GetLocalTimeFromDBColumnString()));
            ishaCongregation.SetSentinelFromProviderValue("00:00:00");

            var jumuah = runtimeEntityType.AddProperty(
                "Jumuah",
                typeof(LocalTime?),
                propertyInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetProperty("Jumuah", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetField("<Jumuah>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            jumuah.SetValueConverter(new ValueConverter<LocalTime?, string>(
                string (LocalTime? x) => (x != null ? x.Value.GetStringForDBColumn() : null),
                LocalTime? (string x) => (x != null ? ((LocalTime? )(x.GetLocalTimeFromDBColumnString())) : null)));

            var jumuah2 = runtimeEntityType.AddProperty(
                "Jumuah2",
                typeof(LocalTime?),
                propertyInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetProperty("Jumuah2", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetField("<Jumuah2>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            jumuah2.SetValueConverter(new ValueConverter<LocalTime?, string>(
                string (LocalTime? x) => (x != null ? x.Value.GetStringForDBColumn() : null),
                LocalTime? (string x) => (x != null ? ((LocalTime? )(x.GetLocalTimeFromDBColumnString())) : null)));

            var maghrib = runtimeEntityType.AddProperty(
                "Maghrib",
                typeof(LocalTime),
                propertyInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetProperty("Maghrib", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetField("<Maghrib>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            maghrib.SetValueConverter(new ValueConverter<LocalTime, string>(
                string (LocalTime x) => x.GetStringForDBColumn(),
                LocalTime (string x) => x.GetLocalTimeFromDBColumnString()));
            maghrib.SetSentinelFromProviderValue("00:00:00");

            var maghribCongregation = runtimeEntityType.AddProperty(
                "MaghribCongregation",
                typeof(LocalTime),
                propertyInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetProperty("MaghribCongregation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetField("<MaghribCongregation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            maghribCongregation.SetValueConverter(new ValueConverter<LocalTime, string>(
                string (LocalTime x) => x.GetStringForDBColumn(),
                LocalTime (string x) => x.GetLocalTimeFromDBColumnString()));
            maghribCongregation.SetSentinelFromProviderValue("00:00:00");

            var shuruq = runtimeEntityType.AddProperty(
                "Shuruq",
                typeof(LocalTime),
                propertyInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetProperty("Shuruq", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MyMosqMosqueDailyPrayerTimes).GetField("<Shuruq>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            shuruq.SetValueConverter(new ValueConverter<LocalTime, string>(
                string (LocalTime x) => x.GetStringForDBColumn(),
                LocalTime (string x) => x.GetLocalTimeFromDBColumnString()));
            shuruq.SetSentinelFromProviderValue("00:00:00");

            var key = runtimeEntityType.AddKey(
                new[] { iD });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "MyMosqPrayerTimes");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
