// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using PrayerTimeEngine.Core.Common.Extension;
using PrayerTimeEngine.Core.Domain.PlaceManagement.Models;

#pragma warning disable 219, 612, 618
#nullable disable

namespace PrayerTimeEngine.Core.Data.EntityFramework.Generated_CompiledModels
{
    internal partial class CompletePlaceInfoEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "PrayerTimeEngine.Core.Domain.PlaceManagement.Models.CompletePlaceInfo",
                typeof(CompletePlaceInfo),
                baseEntityType);

            var iD = runtimeEntityType.AddProperty(
                "ID",
                typeof(int),
                propertyInfo: typeof(CompletePlaceInfo).GetProperty("ID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompletePlaceInfo).GetField("<ID>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            iD.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var city = runtimeEntityType.AddProperty(
                "City",
                typeof(string),
                propertyInfo: typeof(BasicPlaceInfo).GetProperty("City", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BasicPlaceInfo).GetField("<City>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            city.TypeMapping = SqliteStringTypeMapping.Default;

            var cityDistrict = runtimeEntityType.AddProperty(
                "CityDistrict",
                typeof(string),
                propertyInfo: typeof(BasicPlaceInfo).GetProperty("CityDistrict", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BasicPlaceInfo).GetField("<CityDistrict>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            cityDistrict.TypeMapping = SqliteStringTypeMapping.Default;

            var country = runtimeEntityType.AddProperty(
                "Country",
                typeof(string),
                propertyInfo: typeof(BasicPlaceInfo).GetProperty("Country", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BasicPlaceInfo).GetField("<Country>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            country.TypeMapping = SqliteStringTypeMapping.Default;

            var externalID = runtimeEntityType.AddProperty(
                "ExternalID",
                typeof(string),
                propertyInfo: typeof(BasicPlaceInfo).GetProperty("ExternalID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BasicPlaceInfo).GetField("<ExternalID>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            externalID.TypeMapping = SqliteStringTypeMapping.Default;

            var infoLanguageCode = runtimeEntityType.AddProperty(
                "InfoLanguageCode",
                typeof(string),
                propertyInfo: typeof(BasicPlaceInfo).GetProperty("InfoLanguageCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BasicPlaceInfo).GetField("<InfoLanguageCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            infoLanguageCode.TypeMapping = SqliteStringTypeMapping.Default;

            var insertInstant = runtimeEntityType.AddProperty(
                "InsertInstant",
                typeof(Instant?),
                propertyInfo: typeof(CompletePlaceInfo).GetProperty("InsertInstant", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompletePlaceInfo).GetField("<InsertInstant>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            insertInstant.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<Instant?>(
                    (Nullable<Instant> v1, Nullable<Instant> v2) => object.Equals((object)v1, (object)v2),
                    (Nullable<Instant> v) => v.GetHashCode(),
                    (Nullable<Instant> v) => v),
                keyComparer: new ValueComparer<Instant?>(
                    (Nullable<Instant> v1, Nullable<Instant> v2) => object.Equals((object)v1, (object)v2),
                    (Nullable<Instant> v) => v.GetHashCode(),
                    (Nullable<Instant> v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                converter: new ValueConverter<Instant?, string>(
                    (Nullable<Instant> x) => x != null ? x.Value.GetStringForDBColumn() : null,
                    (string x) => x != null ? (Nullable<Instant>)x.GetInstantFromDBColumnString() : null),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Instant?, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<Instant?, string>(
                        (Nullable<Instant> x) => x != null ? x.Value.GetStringForDBColumn() : null,
                        (string x) => x != null ? (Nullable<Instant>)x.GetInstantFromDBColumnString() : null)));

            var latitude = runtimeEntityType.AddProperty(
                "Latitude",
                typeof(decimal),
                propertyInfo: typeof(BasicPlaceInfo).GetProperty("Latitude", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BasicPlaceInfo).GetField("<Latitude>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            latitude.TypeMapping = SqliteDecimalTypeMapping.Default;

            var longitude = runtimeEntityType.AddProperty(
                "Longitude",
                typeof(decimal),
                propertyInfo: typeof(BasicPlaceInfo).GetProperty("Longitude", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BasicPlaceInfo).GetField("<Longitude>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            longitude.TypeMapping = SqliteDecimalTypeMapping.Default;

            var postCode = runtimeEntityType.AddProperty(
                "PostCode",
                typeof(string),
                propertyInfo: typeof(BasicPlaceInfo).GetProperty("PostCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BasicPlaceInfo).GetField("<PostCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            postCode.TypeMapping = SqliteStringTypeMapping.Default;

            var street = runtimeEntityType.AddProperty(
                "Street",
                typeof(string),
                propertyInfo: typeof(BasicPlaceInfo).GetProperty("Street", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BasicPlaceInfo).GetField("<Street>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            street.TypeMapping = SqliteStringTypeMapping.Default;

            var timezoneInfoID = runtimeEntityType.AddProperty(
                "TimezoneInfoID",
                typeof(int?),
                nullable: true);
            timezoneInfoID.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)),
                keyComparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)),
                providerValueComparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1.HasValue && v2.HasValue && (int)v1 == (int)v2 || !v1.HasValue && !v2.HasValue,
                    (Nullable<int> v) => v.HasValue ? (int)v : 0,
                    (Nullable<int> v) => v.HasValue ? (Nullable<int>)(int)v : default(Nullable<int>)),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var key = runtimeEntityType.AddKey(
                new[] { iD });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { timezoneInfoID });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("TimezoneInfoID") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("ID") }),
                principalEntityType);

            var timezoneInfo = declaringEntityType.AddNavigation("TimezoneInfo",
                runtimeForeignKey,
                onDependent: true,
                typeof(TimezoneInfo),
                propertyInfo: typeof(CompletePlaceInfo).GetProperty("TimezoneInfo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompletePlaceInfo).GetField("<TimezoneInfo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "PlaceInfos");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
